# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: CI-CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write # For semantic-release

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend_changed }}
      frontend-changed: ${{ steps.changes.outputs.frontend_changed }}
    steps:
      - name: Setup repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for semantic-release

      - name: Detect changes
        id: changes
        run: |
          # Handle both PR and main branch scenarios
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, compare against the base branch
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
            echo "PR mode: Comparing against base branch"
          else
            # For main branch (squashed commits), compare against the merge base
            # This handles the case where a squashed commit contains multiple changes
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "Main branch mode: Comparing against previous commit"
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

           # Check for shared packages changes
          SHARED_CHANGED=false
          if echo "$CHANGED_FILES" | grep -E "^packages/shared/"; then
            SHARED_CHANGED=true
            echo "Shared packages changed - both backend and frontend will be affected"
          fi

          # Check for backend changes (modular-monolith + shared packages)
          if echo "$CHANGED_FILES" | grep -E "^packages/apps/modular-monolith/" || [ "$SHARED_CHANGED" = true ]; then
            echo "backend_changed=true" >> $GITHUB_OUTPUT
            echo "Backend changes detected"
          else
            echo "backend_changed=false" >> $GITHUB_OUTPUT
            echo "No backend changes detected"
          fi

          # Check for frontend changes (front app + shared packages)
          if echo "$CHANGED_FILES" | grep -E "^packages/apps/front/" || [ "$SHARED_CHANGED" = true ]; then
            echo "frontend_changed=true" >> $GITHUB_OUTPUT
            echo "Frontend changes detected"
          else
            echo "frontend_changed=false" >> $GITHUB_OUTPUT
            echo "No frontend changes detected"
          fi

  test-and-build:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.frontend-changed == 'true'

    steps:
      - name: Setup repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Build backend
        if: needs.detect-changes.outputs.backend-changed == 'true'
        run: |
          pnpm run build:backend

      - name: Build frontend
        if: needs.detect-changes.outputs.frontend-changed == 'true'
        run: |
          pnpm run build:front

  semantic-release-backend:
    needs: [detect-changes, test-and-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.backend-changed == 'true'
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Setup repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Run semantic-release backend
        run: |
          cd packages/apps/modular-monolith
          deno task semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  semantic-release-frontend:
    needs: [detect-changes, test-and-build, semantic-release-backend]
    runs-on: ubuntu-latest
    if: always()
      && github.ref == 'refs/heads/main'
      && needs.detect-changes.outputs.frontend-changed == 'true'
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Setup repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes from backend release
        run: |
          git pull origin main
          git log -1 --pretty=format:"%H %s"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run semantic-release frontend
        run: |
          cd packages/apps/front
          pnpm run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    needs:
      [
        detect-changes,
        test-and-build,
        semantic-release-backend,
        semantic-release-frontend,
      ]
    runs-on: ubuntu-latest
    if: always() &&
      github.ref == 'refs/heads/main' &&
      (needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.frontend-changed == 'true')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pull latest changes from backend release
        run: |
          git pull origin main

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get backend version and name
        if: needs.detect-changes.outputs.backend-changed == 'true'
        id: backend-version
        run: |
          VERSION=$(cat packages/apps/modular-monolith/deno.json | jq -r '.version')
          FULL_NAME=$(cat packages/apps/modular-monolith/deno.json | jq -r '.name')
          # Remove scope prefix (e.g., @deno-monorepo-poc/)
          NAME=$(echo "$FULL_NAME" | sed 's/@[^/]*\///')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "Backend version: $VERSION, name: $NAME (from: $FULL_NAME)"

      - name: Get frontend version and name
        if: needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.frontend-changed == 'true'
        id: frontend-version
        run: |
          VERSION=$(cat packages/apps/front/package.json | jq -r '.version')
          FULL_NAME=$(cat packages/apps/front/package.json | jq -r '.name')
          # Remove scope prefix (e.g., @deno-monorepo-poc/)
          NAME=$(echo "$FULL_NAME" | sed 's/@[^/]*\///')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "Frontend version: $VERSION, name: $NAME (from: $FULL_NAME)"

      - name: Build and push backend
        if: needs.detect-changes.outputs.backend-changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.modular-monolith
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ steps.backend-version.outputs.name }}:latest
            ghcr.io/${{ github.repository }}/${{ steps.backend-version.outputs.name }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}/${{ steps.backend-version.outputs.name }}:v${{ steps.backend-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend
        if: needs.detect-changes.outputs.frontend-changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.front
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ steps.frontend-version.outputs.name }}:latest
            ghcr.io/${{ github.repository }}/${{ steps.frontend-version.outputs.name }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}/${{ steps.frontend-version.outputs.name }}:v${{ steps.frontend-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
